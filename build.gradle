import groovy.json.JsonSlurper

plugins {
    id 'dev.architectury.loom' version '1.6-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'
    apply plugin: 'me.modmuss50.mod-publish-plugin'

    def modLoader = project.name
    boolean isCommon = modLoader == "common"
    boolean isTest = modLoader.contains('test')

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "${rootProject.archives_name}-${modLoader}-${rootProject.minecraft_version}"
    }

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.officialMojangMappings()
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    if (!isTest) {
    // Configure Maven publishing.
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId "com.fej1fun.potentials"
                    artifactId "potentials-$modLoader"
                    version project.version
                    from components.java
                    pom {
                        name = "Potentials" + modLoader.capitalize()
                        url = "https://github.com/Fej1Dev/Potentials"
                    }
                }
            }

            // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
            repositories {
                maven {
                    name = "GithubPackages"
                    url = "https://maven.pkg.github.com/Fej1Dev/Potentials"
                    credentials {
                        username = System.getenv("GITHUB_ACTOR")
                        password = System.getenv("GITHUB_TOKEN")
                    }
                }
                maven {
                    name = "ExodusStudio"
                    url = "https://maven.exodusstudio.org/releases"
                    credentials {
                        username = System.getenv("EXODUS_MAVEN_USERNAME") // DO NOT CHANGE
                        password = System.getenv("EXODUS_MAVEN_KEY") // DO NOT CHANGE
                    }
                }
            }
        }

        if (!isCommon) {
            publishMods {

                def parsedJson = new JsonSlurper().parseText("${supported_minecraft_versions}")
                def supported_versions = parsedJson.versions

                file = file("../${modLoader.capitalize()}/build/libs/potentials-${modLoader}-${minecraft_version}-${mod_version}.jar")
                changelog = file("../changelog.md").getText('UTF-8')
                type = release_type == 'alpha' ? ALPHA : (release_type == 'beta' ? BETA : STABLE)
                modLoaders.add(modLoader)
                displayName = "[${modLoader.capitalize()} ${minecraft_version}] Potentials ${mod_version}"

                curseforge {
                    projectId = "1165185"
                    projectSlug = "potentials" // Required for discord webhook
                    accessToken = providers.gradleProperty('CURSEFORGE_API_KEY')
                    for (String version : supported_versions)
                        minecraftVersions.add(version)

                    javaVersions.add(JavaVersion.VERSION_21)
                    requires("architectury-api")
                    if (modLoader == "fabric") {
                        requires("fabric-api")
                    }
                }

                modrinth {
                    projectId = "J9pKOkxP"
                    accessToken = providers.gradleProperty("MODRINTH_TOKEN")
                    for (String version : supported_versions)
                        minecraftVersions.add(version)

                    requires("architectury-api")
                    if (modLoader == "fabric") {
                        requires("fabric-api")
                    }

                }

//            github {
//                repository = "Fej1Dev/Potentials"
//                accessToken = providers.gradleProperty("GITHUB_TOKEN")
//                commitish = "main"
//                tagName = "${type}/${minecraft_version}"
//
//                // Upload the files to a previously created release, by providing another github publish task
//                // This is useful in multi-project builds where you want to publish multiple subprojects to a single release
//                parent project(":").tasks.named("publishGithub")
//
//                // Optionally allow the release to be created without any attached files.
//                // This is useful when you have subprojects using the parent option that you want to publish a single release.
//                allowEmptyFiles = true
//            }
            }
        }
    }
}
